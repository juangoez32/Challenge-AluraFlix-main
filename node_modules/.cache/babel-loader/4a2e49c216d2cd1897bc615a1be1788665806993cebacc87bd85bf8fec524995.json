{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrador\\\\Desktop\\\\Challenge-AluraFlix-main\\\\src\\\\context\\\\index.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoContext = /*#__PURE__*/React.createContext();\nexport const useVideoContext = () => {\n  _s();\n  return useContext(VideoContext);\n};\n_s(useVideoContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const VideoProvider = ({\n  children\n}) => {\n  _s2();\n  const [videos, setVideos] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  useEffect(() => {\n    fetchVideos();\n  }, []);\n  const fetchVideos = async () => {\n    try {\n      const response = await axios.get('https://my-json-server.typicode.com/karina105/AluraFlix-api/videos');\n      setVideos(response.data);\n    } catch (error) {\n      console.error('Error fetching videos:', error);\n    }\n  };\n  const handleSaveVideo = async editedVideo => {\n    try {\n      const response = await axios.put(`https://my-json-server.typicode.com/karina105/AluraFlix-api/videos/${editedVideo.id}`, editedVideo);\n      console.log('Video actualizado:', response.data);\n\n      // Actualizar el video editado en el estado local\n      setVideos(prevVideos => {\n        return prevVideos.map(video => {\n          if (video.id === editedVideo.id) {\n            return editedVideo;\n          }\n          return video;\n        });\n      });\n      closeModal(); // Cerrar modal después de guardar cambios (si aplicable)\n    } catch (error) {\n      console.error('Error updating video:', error);\n    }\n  };\n  const handleAddVideo = async newVideo => {\n    try {\n      const response = await axios.post('https://my-json-server.typicode.com/karina105/AluraFlix-api/videos', newVideo);\n      console.log('Nuevo video agregado:', response.data);\n\n      // Actualizar la lista de videos en el estado global\n      setVideos(prevVideos => [...prevVideos, response.data]);\n      // Opcionalmente, puedes volver a llamar a fetchVideos para asegurar que la lista esté actualizada\n      // fetchVideos();\n    } catch (error) {\n      console.error('Error adding video:', error);\n    }\n  };\n  const handleDeleteVideo = async videoId => {\n    try {\n      await axios.delete(`https://my-json-server.typicode.com/karina105/AluraFlix-api/videos/${videoId}`);\n      setVideos(prevVideos => prevVideos.filter(video => video.id !== videoId));\n    } catch (error) {\n      console.error('Error eliminando video:', error);\n    }\n  };\n  const openModal = video => {\n    setSelectedVideo(video);\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setSelectedVideo(null);\n    setIsModalOpen(false);\n  };\n  const videoContextValue = {\n    videos,\n    fetchVideos,\n    handleSaveVideo,\n    handleAddVideo,\n    handleDeleteVideo,\n    isModalOpen,\n    openModal,\n    closeModal,\n    selectedVideo\n  };\n  return /*#__PURE__*/_jsxDEV(VideoContext.Provider, {\n    value: videoContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_s2(VideoProvider, \"2QBrZRqpJYWvbb4pVLABigVmQew=\");\n_c = VideoProvider;\nvar _c;\n$RefreshReg$(_c, \"VideoProvider\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","jsxDEV","_jsxDEV","VideoContext","createContext","useVideoContext","_s","VideoProvider","children","_s2","videos","setVideos","isModalOpen","setIsModalOpen","selectedVideo","setSelectedVideo","fetchVideos","response","get","data","error","console","handleSaveVideo","editedVideo","put","id","log","prevVideos","map","video","closeModal","handleAddVideo","newVideo","post","handleDeleteVideo","videoId","delete","filter","openModal","videoContextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrador/Desktop/Challenge-AluraFlix-main/src/context/index.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst VideoContext = React.createContext();\r\n\r\nexport const useVideoContext = () => {\r\n    return useContext(VideoContext);\r\n};\r\n\r\nexport const VideoProvider = ({ children }) => {\r\n    const [videos, setVideos] = useState([]);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [selectedVideo, setSelectedVideo] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchVideos();\r\n    }, []);\r\n\r\n    const fetchVideos = async () => {\r\n        try {\r\n            const response = await axios.get('https://my-json-server.typicode.com/karina105/AluraFlix-api/videos');\r\n            setVideos(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching videos:', error);\r\n        }\r\n    };\r\n\r\n    const handleSaveVideo = async (editedVideo) => {\r\n        try {\r\n            const response = await axios.put(`https://my-json-server.typicode.com/karina105/AluraFlix-api/videos/${editedVideo.id}`, editedVideo);\r\n            console.log('Video actualizado:', response.data);\r\n\r\n            // Actualizar el video editado en el estado local\r\n            setVideos(prevVideos => {\r\n                return prevVideos.map(video => {\r\n                    if (video.id === editedVideo.id) {\r\n                        return editedVideo;\r\n                    }\r\n                    return video;\r\n                });\r\n            });\r\n\r\n            closeModal(); // Cerrar modal después de guardar cambios (si aplicable)\r\n        } catch (error) {\r\n            console.error('Error updating video:', error);\r\n        }\r\n    };\r\n\r\n    const handleAddVideo = async (newVideo) => {\r\n        try {\r\n            const response = await axios.post('https://my-json-server.typicode.com/karina105/AluraFlix-api/videos', newVideo);\r\n            console.log('Nuevo video agregado:', response.data);\r\n\r\n            // Actualizar la lista de videos en el estado global\r\n            setVideos(prevVideos => [...prevVideos, response.data]);\r\n            // Opcionalmente, puedes volver a llamar a fetchVideos para asegurar que la lista esté actualizada\r\n            // fetchVideos();\r\n        } catch (error) {\r\n            console.error('Error adding video:', error);\r\n        }\r\n    };\r\n\r\n    const handleDeleteVideo = async (videoId) => {\r\n        try {\r\n            await axios.delete(`https://my-json-server.typicode.com/karina105/AluraFlix-api/videos/${videoId}`);\r\n            setVideos(prevVideos => prevVideos.filter(video => video.id !== videoId));\r\n        } catch (error) {\r\n            console.error('Error eliminando video:', error);\r\n        }\r\n    };\r\n\r\n    const openModal = (video) => {\r\n        setSelectedVideo(video);\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setSelectedVideo(null);\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const videoContextValue = {\r\n        videos,\r\n        fetchVideos,\r\n        handleSaveVideo,\r\n        handleAddVideo,\r\n        handleDeleteVideo,\r\n        isModalOpen,\r\n        openModal,\r\n        closeModal,\r\n        selectedVideo,\r\n    };\r\n\r\n    return (\r\n        <VideoContext.Provider value={videoContextValue}>\r\n            {children}\r\n        </VideoContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}